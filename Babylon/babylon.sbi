;Babylon.js for SpiderBasic 

;Last update : 12 May 2017

DeclareModule BJS
  ;-Constants.sbi
  IncludeFile "constants.sbi"  
  
  ;-Engine.sbi
  Declare   InitEngine(Callback, CanvasOutput = #PB_Ignore) 
  Declare   CreateSpace2D(Scene)
  Declare   RenderLoop(Callback)
  Declare   RenderWorld()  
  Declare   EnablePhysics();
  Declare   MeshCollide(Mesh1, Mesh2)
  
  Declare   UseAssetManager()
  Declare   AssetManagerAdd(AssetManager, Name.s, Path.s, Object.s, SuccessCallback, FinishCallback)
  Declare   AssetManagerLoad(AssetManager)
    
  ;-Scene.sbi
  Declare   CreateScene()
  Declare   SceneGravity(x.f = 0, y.f = -0.9, z.f = 0)
  Declare   ClearScene(color)
  Declare   BeforeRender(CallBack)
  Declare   EnableOffLineSupport(Value = #True) 
  Declare   CurrentScene(Scene, Camera)
  Declare   ImportScene(Name.s, Path.s, FileName.s, Callback)
  Declare   SaveScene(Scene, Name.s)
  Declare   SceneDebug()
   
  ;-Environment.sbi
  Declare   SkyBox(name.s, sky.s, size.i = 200)
  Declare   CreateWater(Name.s, Texture.s, Width.f, Depth.f, SubDivs.i)
  Declare   WaterRenderList(Water, Mesh)
  Declare   SetWater(Mesh, WindForce.f = -5, WaveHeight.f = 0.05, BumpHeight.f = 0.05, Color = 0, ColorBlendFactor.f = 0.1)
  
  Declare   Fog(Color, Intensity.f = 0.01 , StartDistance.f = 20.0, EndDistance.f = 60.0)
  Declare   AmbientColor(Color.i)
  
  ;Light
  Declare   CreateLight(id.s, x.f, y.f, z.f, intensity.f = 1, mode.i = #Hemispheric)
  Declare   SpotLightRange(Light, InnerAngle.f, OuterAngle.f)
  Declare   LightDirection(Light, x.f, y.f, z.f)
  Declare   MoveLight(Light.i, x.f, y.f, z.f, Mode = #PB_Relative)
  Declare   EnableLight(Light, Value.b)
  Declare   SetLightColor(Light, Type, Color)
  
  ;Shadow
  Declare   InitShadow(Light, RenderSize = 1024)
  Declare   ShadowEmitter(Mesh)
  Declare   RenderShadows(Mesh, Value.b = #True) 
 
  ;-Camera.sbi 
  Declare   CreateCamera(id.s, x.f, y.f, z.f, Type = #Free)
  Declare   CameraLookAtMesh(Camera, MeshObject)
  Declare   CameraLookAt(Camera, x.f, y.f, z.f)
  Declare   ActiveCamera(Camera)
  Declare   MoveCamera(Camera, x.f, y.f, z.f, Mode = #PB_Absolute)
  Declare   CameraX(Camera)
  Declare   CameraY(Camera)
  Declare   CameraZ(Camera)
  Declare   RotateCamera(Camera, x.f, y.f, z.f, Mode = #PB_Absolute)  
  Declare   CameraMapKey(Camera, Key, Value = #PB_Ignore)
  Declare   DisableControlCamera(Camera, Value.b = #All)
  Declare   CameraCollision(Camera, Value = #True)
  Declare   CameraGravity(Camera, Value = #True)
  Declare   CameraBodySize(Camera, x.f = 1, y.f = 1, z.f = 1)
  
  Declare   GetCameraBeta(Camera)
  Declare   GetCameraAlpha(Camera)
  Declare   GetCameraRadius(Camera)
  Declare   SetCameraBeta(Camera, Value.f)
  Declare   SetCameraAlpha(Camera, Value.f)
  Declare   SetCameraRadius(Camera, Value.f)
  
  ;-Material.sbi
  Declare   CreateMaterial(Name.s, Image.s, BackFaceCulling = #False)
  Declare   ScaleMaterial(Material, UScale.f, VScale.f)
  Declare   ScrollMaterial(Material, UOffset.f, VOffset.f)
  Declare   SetMaterial(Mesh, Material)
  Declare   SetMaterialColor(Material, Type, Color)
  
  ;-Mesh.sbi
  Declare   CreateSphere(Name.s, Size.f, Subdivs.i = 16)  
  Declare   CreateGround(Name.s, Width.f, Depth.f, Subdivs=2)
  Declare   CreateBox(Name.s, Size.f)
  Declare   CreatePlane(Name.s, Size.f)
  Declare   CreateCylinder(Name.s, Height.f, DiamTop.f, DiamBottom.f, Tessellation.i = 30, HeightSubdivs.i = 1)
  Declare   CreateTorus(Name.s, Diameter, Thickness, Tesselation = 32)
  Declare   CreateTerrain(Name.s, HeightmapPath.s, Width.f, Depth.f, Subdivs.i, MinHeight.f, MaxHeight.f)

  Declare   CreateBody(Mesh, Type, Mass.f = 1.0, Restitution.f = 1.0, Friction = 0.1)
  Declare.s GetMeshName(Mesh)
  Declare   FreeMesh(Mesh)
  Declare   MoveMesh(Mesh, x.f, y.f, z.f, Mode = #PB_Absolute)
  Declare   RotateMesh(Mesh, x.f, y.f, z.f, Mode = #PB_Absolute)
  Declare   ScaleMesh(Mesh, x.f, y.f, z.f, Mode = #PB_Absolute)
  Declare.f MeshX(Mesh)
  Declare.f MeshY(Mesh)
  Declare.f MeshZ(Mesh)
  
  Declare   CloneMesh(Mesh)
  Declare   Attach(Parent, Child, x.f, y.f, z.f)
    
  ;Picking
  Declare   PickEnable()
  Declare   IsPick()
  Declare.f PickX()
  Declare.f PickY()
  Declare.f PickZ()
  Declare.f PickDistance()
  Declare   MeshId(Mesh)
  
  ;Move mesh local
  Declare   Translate(Mesh, Value.f)
  
  ;-particle.sbi
  Declare   CreateParticleEmitter(Name.s, Mesh, MaxNumberParticles = 2000) 
  Declare   ParticleTexture(Emitter, FileName.s)
  Declare   ParticleEmitBox(Emitter, x0.f, y0.f, z0.f, x1.f, y1.f, z1.f)
  Declare   ParticleColor(Emitter, Color1, Color2)
  Declare   ParticleColorDead(Emitter, Color)
  Declare   ParticleSizeRange(Emitter, Min.f, Max.f)
  Declare   ParticleTimeToLive(Emitter, Min.f, Max.f)
  Declare   ParticleEmissionRate(Emitter, Value.i)
  Declare   ParticleGravity(Emitter, x.f, y.f, z.f)
  Declare   ParticleDirection(Emitter, x1.f, y1.f, z1.f, x2.f, y2.f, z2.f)
  Declare   ParticleAngularSpeed(Emitter, Min.f, Max.f)
  Declare   ParticleSpeed(Emitter, Min.f, Max.f, Update.f)
  
  Declare   StartParticle(Emitter)
  Declare   StopParticle(Emitter)
  
  ;-music.sbi
  Declare   MusicLoad(Name.s, FileName.s, Loop = #False, Autoplay = #False, CallBack = #False)
  Declare   MusicVolume(Music, Value.f)
  Declare   MusicPlay(Music)
  Declare   MusicStop(Music)
  Declare   MusicPosition(Music, x.f, y.f, z.f)
  Declare   MusicAttachToMesh(Music, Mesh)
  
  ;-gui2d.sbi
  Declare   UseParent(CurrentParent = #False)
  Declare   Text2D(x, y, w, h, Text.s, CallBack = #False, Font.s = "25pt Arial", Color = $FF000000) 	
  Declare   Rectangle2D(Name.s, x, y, w, h, Radius = 6, BorderSize = 4, CallBack = #False, FillColor = $FFFFFFFF, BorderColor = $FF000000) 
  Declare   Button2D(Name.s, x.f, y.f, w.f, h.f, Text.s = "", CallBack = #False, Font.s = "25pt Arial", FillColor = $FFFFFFFF, FrontColor = $FF000000, BorderColor = $FF000000)
  Declare   Image2D(Name.s, x.f, y.f, Image.s);
  Declare   SetText(Element, Text.s)
  
  ;- Keyboard.sbi
  Declare   InitKey()
  Declare   KeyPushed(Key)
  Declare   KeyReleased(Key)
  
  ;Tools.sbi
  Declare   RunURL(Url.s, NewTab.b = #True)
EndDeclareModule

Module BJS
  IncludeFile "tools.sbi"
  IncludeFile "engine.sbi"   
  IncludeFile "scene.sbi"
  IncludeFile "camera.sbi"
  IncludeFile "environment.sbi"
  IncludeFile "material.sbi"
  IncludeFile "mesh.sbi"
  IncludeFile "particle.sbi"
  IncludeFile "music.sbi"
  IncludeFile "gui2d.sbi"
  IncludeFile "keyboard.sbi"
EndModule
  
; IDE Options = SpiderBasic 2.00 (Windows - x86)
; CursorPosition = 94
; FirstLine = 60
; Folding = -
; Markers = 119
; iOSAppOrientation = 0
; AndroidAppOrientation = 0
; EnableXP
; CompileSourceDirectory