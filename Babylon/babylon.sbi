;Babylon.js for SpiderBasic 

;Version     : 1.1.0

;Last update : 28, 02 2018
; Add 
;   PointerLock(Value = #True)
;   IsPointerLock()
;   MouseLock(LockCallback, UnLockCallback)
;
;   GUI : FreeObject3D(Object)

; Update
;   ImportScene(Name.s, Paths.s, FileName.s, Callback) -> ImportScene(Name.s, FileName.s, Callback)


DeclareModule BJS
  ;-Constants.sbi
  IncludeFile "constants.sbi"  
  
  ;-Engine.sbi
  Declare   SetEnginePath(EnginePath.s = "sbbjs")
  
  Declare   InitEngine(Callback, CanvasOutput = #PB_Ignore) 
  Declare   PointerLock(Value = #True)
  Declare   IsPointerLock()
  Declare   MouseLock(LockCallback, UnLockCallback)
  Declare   RenderLoop(Callback)
  Declare   RenderWorld()  
  Declare   CreateSceneShoot(Camera, Width, Height, Precision.f=1)    
  Declare   ShowAxis(size) 
  
  ;-Scene.sbi
  Declare   CreateScene()
  Declare   SceneWidth()
  Declare   SceneHeight()
  Declare   SceneGravity(x.f = 0, y.f = -0.9, z.f = 0)
  Declare   ClearScene(color)
  Declare   onMouseDown(CallBack)
  Declare   onMouseMove(CallBack)
  Declare   SceneMouseX(Scene)
  Declare   SceneMouseY(Scene)  
  Declare   BeforeRender(CallBack)
  Declare   SetCurrentScene(Scene, Camera)
  Declare   ImportScene(Name.s, FileName.s, Callback) 
  Declare   ExportScene(Scene, FileName.s)
  Declare   SceneDebug()
   
  ;-Environment.sbi
  Declare   AmbientColor(Color.i)
  Declare   SkyBox(name.s, Sky.s, size.i=200)
  Declare   Fog(Color, Intensity.f = 0.01 , StartDistance.f = 20.0, EndDistance.f = 60.0)
  
  ;Water
  Declare   CreateWater(Name.s, FileName.s, Width.f, Depth.f, SubDivs.i)
  Declare   WaterRenderList(Water, Mesh)
  Declare   SetWater(Mesh, WindForce.f = -5, WaveHeight.f = 0.05, BumpHeight.f = 0.05, Color = 0, ColorBlendFactor.f = 0.1)
    
  ;Light
  Declare   CreateLight(Name.s, x.f, y.f, z.f, intensity.f = 1, mode.i = #BJS_Hemispheric)
  Declare   SpotLightRange(Light, InnerAngle.f, Exponent.f)
  Declare   LightDirection(Light, x.f, y.f, z.f)
  Declare   MoveLight(Light.i, x.f, y.f, z.f, Mode = #PB_Relative)
  Declare   EnableLight(Light, Value.b)
  Declare   SetLightColor(Light, Type, Color)
  Declare   GetLightIntensity(Light)
  Declare   SetLightIntensity(Light, Intensity.f)
  Declare   VolumetricLight(Name.s, Camera, Ratio.f = 1.0, PostProcessQuality = 100)
  
  ;Shadow
  Declare   InitShadow(Light, RenderSize = 1024)
  Declare   ShadowEmitter(ShadowGenerator, Mesh)
  Declare   RenderShadows(Mesh, Value.b = #True) 
 
  ;-Camera.sbi 
  Declare   CreateCamera(Name.s, x.f, y.f, z.f, Type = #BJS_Free)
  Declare   CameraFov(Camera, Fov.f) 
  Declare   CameraRange(Camera, Near, Far)
  Declare   CameraLookAtMesh(Camera, MeshObject)
  Declare   CameraLookAt(Camera, x.f, y.f, z.f)
  Declare   CameraSpeed(Camera, Speed.f)
  Declare   ActiveCamera(Camera)
  Declare   MoveCamera(Camera, x.f, y.f, z.f, Mode = #PB_Absolute)
  Declare   CameraX(Camera)
  Declare   CameraY(Camera)
  Declare   CameraZ(Camera)
  Declare   RotateCamera(Camera, x.f, y.f, z.f, Mode = #PB_Absolute)  
  Declare   CameraMapKey(Camera, Key, Value = #PB_Ignore)
  Declare   DisableControlCamera(Camera, Value.b = #All)
  Declare   CameraCollision(Camera, Value = #True)
  Declare   CameraGravity(Camera, Value = #True)
  Declare   CameraBodySize(Camera, x.f = 1, y.f = 1, z.f = 1)
  Declare   CameraCollide(Camera, CallBack)
  
  Declare   GetCameraBeta(Camera)
  Declare   GetCameraAlpha(Camera)
  Declare   GetCameraRadius(Camera)
  Declare   SetCameraBeta(Camera, Value.f)
  Declare   SetCameraAlpha(Camera, Value.f)
  Declare   SetCameraRadius(Camera, Value.f)
  
  ;-Texture.sbi
  Declare   LoadTexture(FileName.s)
  Declare   LoadCubeTexture(FileName.s)
  Declare   LoadVideoTexture(Names.s, FileName.s)
  Declare   CreateMirrorTexture(Name.s = "mirror", Size.i = 1024)
  
  ;-Material.sbi
  Declare   CreateMaterial(Name.s, BackFaceCulling = #False)
  Declare   ScaleMaterial(Material, UScale.f, VScale.f)
  Declare   ScrollMaterial(Material, UOffset.f, VOffset.f)
  Declare   SetMaterialColor(Material, Type, Color)
  Declare   SetMaterialTexture(Material, Type, Texture, HasAlpha = #False)
  Declare   SetMaterialAttribute(Material, Attribut, Value.f)
  Declare   SetMaterialAlpha(Material, Alpha.f)
  Declare   SetMeshMaterial(Mesh, material)
  Declare   CloneMaterial(Material)  
  
  ;-Mesh.sbi
  Declare   CreateSphere(Name.s, Size.f, Subdivs.i = 16)  
  Declare   CreateGround(Name.s, Width.f, Depth.f, Subdivs=2)
  Declare   CreateBox(Name.s, Width.f, Height.f, Depth.f)
  Declare   CreatePlane(Name.s, Width.f, Height.f)
  Declare   CreateCylinder(Name.s, Height.f, DiamTop.f, DiamBottom.f, Tessellation.i = 30, HeightSubdivs.i = 1)
  Declare   CreateTorus(Name.s, Diameter, Thickness, Tesselation = 32)
  Declare   CreateIcoSphere(Name.s, Radius, RadiusY, Subdivs = 16)
  Declare   CreateTube(Name.s, Array VectorsArray.NewVector(1), Radius.f, Tessellation = 32, RadiusFunction = #PB_Ignore)
  Declare   CreateTerrain(Name.s, FileName.s, Width.f, Depth.f, Subdivs.i, MinHeight.f, MaxHeight.f)
   
  ;Physics
  Declare   CreateMeshBody(Mesh, Type, Mass.f = 1.0, Restitution.f = 1.0, Friction = 0.1)
  Declare   ApplyMeshImpulse(Mesh, x.f, y.f, z.f)
  Declare   MeshCollide(Mesh1, Mesh2, CallBack)
  Declare   GetCollideMesh(Mesh)
  Declare   GhostMesh(Mesh, Value = #True)
  Declare   HideMesh(Mesh, Value = #True)
  Declare   MeshAppearance(Mesh, Attribut)
  
  Declare.s GetMeshName(Mesh)
  Declare   GetMeshByName(MeshName.s)
  Declare   FreeMesh(Mesh)
    
  Declare   RotateMesh(Mesh, x.f, y.f, z.f, Mode = #PB_Absolute)
  Declare   ScaleMesh(Mesh, x.f, y.f, z.f, Mode = #PB_Absolute)
  Declare   MeshLookAt(Mesh, Target)
  
  ;Move, Position
  Declare   MoveMesh(Mesh, x.f, y.f, z.f, Mode = #PB_Absolute)
  Declare.f MeshX(Mesh)
  Declare.f MeshY(Mesh)
  Declare.f MeshZ(Mesh)
  
  Declare   CloneMesh(Mesh, Name.s = "")
  Declare   MergeMeshes(Array Meshes(1))
  Declare   AttachMesh(Parent, Child, x.f, y.f, z.f)
  Declare   SetMeshPivot(Mesh, x.f, y.f, z.f)
    
  ;Picking
  ;  Declare   PickEnable(MouseLock = #False)
  Declare   MousePick(x.f, y.f)
  Declare   IsPick()
  Declare   PickMesh()
  Declare.f PickX()
  Declare.f PickY()
  Declare.f PickZ()
  Declare.f PickDistance()
  Declare   MeshId(Mesh)
  
  ;Move mesh local
  Declare   Translate(Mesh, Value.f)
  
  ;-particle.sbi
  Declare   CreateParticleEmitter(Name.s, Mesh, MaxNumberParticles = 2000) 
  Declare   ParticleTexture(Emitter, FileName.s, BlendMode = #False)
  Declare   ParticleEmitBox(Emitter, x0.f, y0.f, z0.f, x1.f, y1.f, z1.f)
  Declare   ParticleColor(Emitter, Color1, Color2)
  Declare   ParticleColorDead(Emitter, Color)
  Declare   ParticleSizeRange(Emitter, Min.f, Max.f)
  Declare   ParticleTimeToLive(Emitter, Min.f, Max.f)
  Declare   ParticleEmissionRate(Emitter, Value.i)
  Declare   ParticleGravity(Emitter, x.f, y.f, z.f)
  Declare   ParticleDirection(Emitter, x1.f, y1.f, z1.f, x2.f, y2.f, z2.f)
  Declare   ParticleAngularSpeed(Emitter, Min.f, Max.f)
  Declare   ParticleSpeed(Emitter, Min.f, Max.f, Update.f)
  
  Declare   StartParticle(Emitter)
  Declare   StopParticle(Emitter)
  
  ;-music.sbi
  Declare   MusicLoad(Name.s, FileName.s, Loop = #False, Autoplay = #False, CallBack = #False)
  Declare   MusicVolume(Music, Value.f)
  Declare   GetMusicVolume(Music)
  Declare   MusicPlay(Music, Loop = #False)
  Declare   IsMusicPlay(Music)
  Declare   MusicPause(Music)
  Declare   IsMusicPause(Music)
  Declare   MusicStop(Music)
  Declare   SetMusicPosition(Music, x.f, y.f, z.f)
  Declare   MusicAttachToMesh(Music, Mesh)
  
  ;-gui.sbi (Dynamic texture)
  Declare   CreateDynamicTexture(Mesh = #False)
  Declare   AddControl3D(Parent, Child)
  Declare   HideControl3D(Object, Value = #True)
  
  Declare   Rectangle3D(Name.s, x.i, y.i, Width.i = -1, Height.i = -1, Radius = 8, Thickness = 1)
  Declare   Text3D(Name.s, x.i, y.i, Width.i, Height.i, Text.s, Align = #BJS_Center)
  Declare   Button3D(Name.s, x.i, y.i, Width.i, Height.i, Text.s, Callback, CornerRadius = 8)
  Declare   Image3D(Name.s, x.i, y.i, Width.i, Height.i, FileName.s, OnClick = #False)
  Declare   Slider3D(Name.s, x.i, y.i, Width.i, Height.i, MiniMum.i, Maximum.i, OnChange, BarOffset = 8)
  Declare   Input3D(Name.s, x.i, y.i, Width.i, Height.i, Text.s, OnLostFocus=#False, OnTextChange=#False, OnGetFocus=#False)
  Declare   PickerColor3D(Name.s, x.i, y.i, Width.i, Height.i, CallBack)
   
  Declare.s GetText3D(Object)
  Declare   SetText3D(Object, Text.s)
  Declare   SetColor3D(Object, ColorType, Color)
  Declare   SetTextFont3D(Object, FontFamily.s, FontSize)
  Declare   SetOpacity3D(Object, Alpha.f)
  Declare   SetZindex3D(Object, zIndex.i)
  
  Declare   GetState3D(Object)
  Declare   SetState3D(Object, Value)
  
  Declare   Text3DLinkToMesh(Mesh, ObjectText, OffSetY.f)
  
  Declare   MoveObject3D(Object, x.i, y.i)
  
  Declare   FreeObject3D(Object)
  
  ;- Keyboard.sbi
  Declare   InitKey()
  Declare   KeyPushed(Key)
  Declare   KeyReleased(Key)
  
  ;-assetsmanager.sbi
  Declare   UseAssetsManager(ProgressCallback = #False)
  Declare   AssetsManagerColor(Color)
  Declare   AssetsManagerAdd(Name.s, FileName.s, CallBackSucces, CallBackError)
  Declare   AssetsManagerPrompt(Text.s)
  Declare   AssetsManagerLoad()
  
  ;-Animation
  Declare   CreateAnimation(Skeleton, KeyStart, KeyEnd, Loop, Speed.f)
  Declare   PauseAnimation(Animation)
  Declare   RestartAnimation(Animation)
  Declare   StopAnimation(Animation)
  Declare   ResetAnimation(Animation)
  
  ;-CSG
  Declare   CSGMeshCreate(FromMesh, SubMesh, Operation.i = #BJS_Subtract, Material = 0)
  
  
  ;Tools.sbi
  Declare   RunURL(Url.s, NewTab.b = #True)
EndDeclareModule

Module BJS
  IncludeFile "tools.sbi"
  IncludeFile "engine.sbi"   
  IncludeFile "scene.sbi"
  IncludeFile "camera.sbi"
  IncludeFile "environment.sbi"
  IncludeFile "texture.sbi"
  IncludeFile "material.sbi"
  IncludeFile "mesh.sbi"
  IncludeFile "particle.sbi"
  IncludeFile "music.sbi"
  IncludeFile "assetsmanager.sbi"
  IncludeFile "animation.sbi"
  IncludeFile "csg.sbi"
  
  IncludeFile "gui.sbi"
  IncludeFile "keyboard.sbi"
EndModule
; IDE Options = SpiderBasic 2.20 (Windows - x86)
; CursorPosition = 159
; FirstLine = 118
; Folding = -
; iOSAppOrientation = 0
; AndroidAppOrientation = 0
; EnableXP
; CompileSourceDirectory