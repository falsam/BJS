;Babylon.js for SpiderBasic : Material 

;Private
Procedure MaterialDefine(Material)
  !if (typeof(v_material) == "undefined") {
  !   BABYLON.Tools.Log("Material is not initialized (UseAssetsManager()")
  !   return false
  !} else {
  !   return true
  !}
EndProcedure

Procedure CreateMaterial(Name.s, BackFaceCulling = #False)
  !var material = new BABYLON.StandardMaterial(v_name, v_bjscurrentscene);
  !material.backFaceCulling = v_backfaceculling;  //Show (or not) the front and the back of an element    
  !return material  
EndProcedure

Procedure ScaleMaterial(Material, UScale.f, VScale.f)
  If MaterialDefine(Material)
    !v_material.diffuseTexture.uScale = v_uscale;     //Repeat x times on the Vertical Axes
    !v_material.diffuseTexture.vScale = v_vscale;     //Repeat x times on the Horizontal Axes
  EndIf
EndProcedure

Procedure ScrollMaterial(Material, UOffset.f, VOffset.f)
  If MaterialDefine(Material)
    !v_material.diffuseTexture.uOffset = v_uoffset;
    !v_material.diffuseTexture.vOffset = v_voffset;
  EndIf
EndProcedure

Procedure SetMaterialColor(Material, Type, Color)
  Protected r.f = Red(Color)/255
  Protected g.f = Green(Color)/255
  Protected b.f = Blue(Color)/255
  
  If MaterialDefine(Material)
    
    Select Type
      Case #BJS_Specular
        !v_material.specularColor = new BABYLON.Color3(v_r, v_g, v_b);
        
      Case #BJS_Diffuse
        !v_material.diffuseColor = new BABYLON.Color3(v_r, v_g, v_b);
        
      Case #BJS_Ambient
        !v_material.ambientColor = new BABYLON.Color3(v_r, v_g, v_b);
        
      Case #BJS_GroundColor
        !v_material.groundColor = new BABYLON.Color3(v_r, v_g, v_b);
        
      Case #BJS_Emissive
        !v_material.emissiveColor = new BABYLON.Color3(v_r, v_g, v_b);
        
      Case #BJS_Reflection
        !v_material.reflectivityColor = new BABYLON.Color3(v_r, v_g, v_b);
                
    EndSelect
  EndIf
EndProcedure

Procedure SetMaterialTexture(Material, Type, Texture, HasAlpha = #False)
  Select Type
    Case #BJS_Specular
      !v_material.specularTexture = v_texture;
      !v_material.specularTexture.hasAlpha = v_hasalpha;
      
    Case #BJS_Diffuse
      !v_material.diffuseTexture = v_texture;
      !v_material.diffuseTexture.hasAlpha = v_hasalpha;
      
    Case #BJS_Ambient
      !v_material.ambientTexture = v_texture;
      !v_material.ambientTexture.hasAlpha = v_hasalpha;
      
    Case #BJS_Emissive
      !v_material.emissiveTexture = v_texture;
      !v_material.emissiveTexture.hasAlpha = v_hasalpha;
      
    Case #BJS_Bump
      !v_material.bumpTexture = v_texture;
      !v_material.bumpTexture.hasAlpha = v_hasalpha;
      !v_material.bumpTexture.uScale = v_material.diffuseTexture.uScale
      !v_material.bumpTexture.vScale = v_material.diffuseTexture.vScale
      
    Case #BJS_Reflection
      !v_material.reflectionTexture = v_texture
      
    Case #BJS_Refraction
      !v_material.refractionTexture = v_texture
      
  EndSelect
EndProcedure

Procedure SetMaterialAttribute(Material, Attribut, Value.f)
  Select Attribut
    Case #BJS_Alpha
      !v_material.alpha = v_value; 
      
    Case #BJS_SpecularPower
      !v_material.specularPower = v_value;
      
  EndSelect  
EndProcedure

Procedure SetMaterialAlpha(Material, Alpha.f) ;Obsolet
  If MaterialDefine(Material)  
    !v_material.alpha = v_alpha;   
  EndIf  
EndProcedure

Procedure SetMeshMaterial(Mesh, Material)
  If MaterialDefine(Material)
    !v_mesh.material = v_material;
  EndIf  
EndProcedure

Procedure CloneMaterial(Material)
  If MaterialDefine(Material)
    !return v_material.clone()
  EndIf  
EndProcedure
; IDE Options = SpiderBasic 2.20 (Windows - x86)
; CursorPosition = 106
; FirstLine = 60
; Folding = --
; iOSAppOrientation = 0
; AndroidAppOrientation = 0
; EnableXP
; CompileSourceDirectory