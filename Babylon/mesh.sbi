;Babylon.js for SpiderBasic : Mesh

;-
;-Basic Object
Procedure CreateSphere(Name.s, Size.f, Subdivs = 16)
  !var mesh = BABYLON.Mesh.CreateSphere(v_name, v_subdivs, v_size, v_bjscurrentscene);
  !mesh.checkCollisions = true
  !return mesh
EndProcedure

Procedure CreateGround(Name.s, Width.f, Depth.f, Subdivs=2)
  !var mesh = BABYLON.Mesh.CreateGround(v_name, v_width, v_depth, v_subdivs, v_bjscurrentscene);
  !mesh.checkCollisions = true
  !return mesh
EndProcedure

Procedure CreatePlane(Name.s, Width.f, Height.f)
  !var mesh = BABYLON.MeshBuilder.CreatePlane(v_name, {width:v_width, height:v_height}, v_bjscurrentscene);
  !mesh.checkCollisions = true
  !return mesh
EndProcedure

Procedure CreateBox(Name.s, Width.f, Height.f, Depth.f)  
  !var mesh = BABYLON.MeshBuilder.CreateBox(v_name, {width:v_width, height:v_height, depth:v_depth}, v_bjscurrentscene);
  !mesh.checkCollisions = true
  !return mesh
EndProcedure

Procedure CreateCylinder(Name.s, Height.f, DiamTop.f, DiamBottom.f, Tessellation.i = 30, HeightSubdivs.i = 1)
  !var mesh = BABYLON.Mesh.CreateCylinder(v_name, v_height, v_diamtop, v_diambottom, v_tessellation, v_heightsubdivs, v_bjscurrentscene);
  !mesh.checkCollisions = true
  !return mesh
EndProcedure

Procedure CreateTorus(Name.s, Diameter, Thickness, Tesselation = 32)
  !var mesh = BABYLON.Mesh.CreateTorus(v_name, v_diameter, v_thickness, v_tesselation, v_bjscurrentscene);
  !mesh.checkCollisions = true
  !return mesh
EndProcedure

Procedure CreateTube(Name.s, Array VectorsArray.NewVector(1), Radius.f, Tessellation = 32, RadiusFunction = #PB_Ignore)
  Protected n, x.f, y.f, z.f
  
  If RadiusFunction = #PB_Ignore
    RadiusFunction = 0
  EndIf
    
  !var vectors = []
  
  For n = 0 To ArraySize(VectorsArray())
    x = VectorsArray(n)\x
    y = VectorsArray(n)\y
    z = VectorsArray(n)\z   
    !vectors.push( new BABYLON.Vector3(v_x, v_y, v_z) );  
  Next
  
  !var mesh = BABYLON.Mesh.CreateTube(v_name, vectors, v_radius, v_tessellation, v_radiusfunction, null, v_bjscurrentscene, true, BABYLON.Mesh.FRONTSIDE); 
  !mesh.checkCollisions = true
  !return mesh
EndProcedure

Procedure CreateIcoSphere(Name.s, Radius, RadiusY, Subdivs = 16)
  !var mesh = BABYLON.MeshBuilder.CreateIcoSphere(v_name, {radius: v_radius, radiusY: v_radiusy, subdivisions: v_subdivs}, v_bjscurrentscene);
  !mesh.checkCollisions = true
  !return mesh
EndProcedure

Procedure CreateTerrain(Name.s, FileName.s, Width.f, Depth.f, Subdivs.i, MinHeight.f, MaxHeight.f)
  !var mesh = BABYLON.Mesh.CreateGroundFromHeightMap(v_name, v_filename, v_width, v_depth, v_subdivs, v_minheight, v_maxheight, v_bjscurrentscene, false);
  !mesh.checkCollisions = true
  !return mesh
EndProcedure

;-
Procedure.s GetMeshName(Mesh)
  !return v_mesh.name  
EndProcedure

Procedure GetMeshByName(MeshName.s)
  !for (var index = 0; index < v_bjscurrentscene.meshes.length; ++index) {
  ! if (v_bjscurrentscene.meshes[index].name == v_meshname) {
  !   return v_bjscurrentscene.meshes[index];
  !   break;
  ! };
  !}
EndProcedure

Procedure FreeMesh(Mesh)
  !v_mesh.dispose()  
EndProcedure


;Physics
Procedure CreateMeshBody(Mesh, Type, Mass.f = 1.0, Restitution.f = 1.0, Friction = 0.1)
  Select type 
    Case #BJS_PlaneBody ;unlimited surface. 
      !v_mesh.physicsImpostor = new BABYLON.PhysicsImpostor(v_mesh, 
      !  BABYLON.PhysicsImpostor.PlaneImpostor, {
      !     mass        : v_mass, 
      !     restitution : v_restitution,
      !     friction    : v_friction
      !  }, 
      !v_bjscurrentscene); 
      
    Case #BJS_SphereBody 
      !v_mesh.physicsImpostor = new BABYLON.PhysicsImpostor(v_mesh, 
      !  BABYLON.PhysicsImpostor.SphereImpostor, {
      !     mass        : v_mass, 
      !     restitution : v_restitution,
      !     friction    : v_friction
      !  }, 
      !v_bjscurrentscene); 
      
    Case #BJS_BoxBody
      !v_mesh.physicsImpostor = new BABYLON.PhysicsImpostor(v_mesh, 
      !  BABYLON.PhysicsImpostor.BoxImpostor, {
      !     mass        : v_mass, 
      !     restitution : v_restitution,
      !     friction    : v_friction
      !  }, 
      !v_bjscurrentscene); 
      
    Case #BJS_CylinderBody
      !v_mesh.physicsImpostor = new BABYLON.PhysicsImpostor(v_mesh, 
      !  BABYLON.PhysicsImpostor.CylinderImpostor, {
      !     mass        : v_mass, 
      !     restitution : v_restitution,
      !     friction    : v_friction
      !  }, 
      !v_bjscurrentscene); 
        
  EndSelect
  
  If Mass <> 0 ;Apply small Impulse
      !v_mesh.physicsImpostor.applyImpulse(new BABYLON.Vector3(0.01, 0.01, 0.01), v_mesh.getAbsolutePosition());
  EndIf  
EndProcedure

Procedure ApplyMeshImpulse(Mesh, x.f, y.f, z.f)
  !v_mesh.physicsImpostor.applyImpulse(new BABYLON.Vector3(v_x, v_y, v_z), v_mesh.getAbsolutePosition());
EndProcedure

Procedure MeshCollide(Mesh1, Mesh2, CallBack)
  !v_mesh1.physicsImpostor.registerOnPhysicsCollide(v_mesh2.physicsImpostor, v_callback)
EndProcedure

Procedure GetCollideMesh(Mesh)
  !return v_mesh.object  
EndProcedure

Procedure GhostMesh(Mesh, Value = #True)
  !v_mesh.checkCollisions = !v_value  
EndProcedure

Procedure HideMesh(Mesh, Value = #True)
  !v_mesh.visibility = !v_value
EndProcedure

Procedure MeshAppearance(Mesh, Attribut)
  Select Attribut
      Case #BJS_Solid
        !v_mesh.material.wireframe = false
        !v_mesh.showBoundingBox = false;
        
      Case #BJS_WireFrame
        !v_mesh.material.wireframe = true
        
      Case #BJS_BoundingBox
        !v_mesh.showBoundingBox = true;
  EndSelect
EndProcedure

;-
;- Move, Rotate, Scale, Position
Procedure MoveMesh(Mesh, x.f, y.f, z.f, Mode = #PB_Absolute)
  If mode = #PB_Absolute
    !v_mesh.position.x = v_x;
    !v_mesh.position.y = v_y;
    !v_mesh.position.z = v_z;
  Else
    !v_mesh.position.x += v_x;
    !v_mesh.position.y += v_y;
    !v_mesh.position.z += v_z;
  EndIf
EndProcedure

Procedure RotateMesh(Mesh, x.f, y.f, z.f, Mode = #PB_Absolute)
  If mode = #PB_Absolute
    !v_mesh.rotation.x = v_x * (Math.PI/180);
    !v_mesh.rotation.y = v_y * (Math.PI/180);
    !v_mesh.rotation.z = v_z * (Math.PI/180);
  Else
    !v_mesh.rotation.x += v_x * (Math.PI/180);
    !v_mesh.rotation.y += v_y * (Math.PI/180);
    !v_mesh.rotation.z += v_z * (Math.PI/180);
  EndIf
EndProcedure

Procedure ScaleMesh(Mesh, x.f, y.f, z.f, Mode = #PB_Absolute)
  If mode = #PB_Absolute
    !v_mesh.scaling.x = v_x; 
    !v_mesh.scaling.y = v_y;
    !v_mesh.scaling.z = v_z;
  Else
    !v_mesh.scaling.x += v_x;
    !v_mesh.scaling.y += v_y;
    !v_mesh.scaling.z += v_z;
  EndIf
EndProcedure

Procedure MeshLookAt(Mesh, Target)
  !v_mesh.lookAt(v_target.position);  
EndProcedure

Procedure.f MeshX(Mesh)
  !return v_mesh.position.x  
EndProcedure

Procedure.f MeshY(Mesh)
  !return v_mesh.position.y  
EndProcedure

Procedure.f MeshZ(Mesh)
  !return v_mesh.position.z  
EndProcedure

Procedure CloneMesh(Mesh, Name.s = "")
  If Trim(Name) = ""
    !v_name = v_mesh.name
  EndIf
    
  !var mesh =  v_mesh.clone();
  !mesh.id = v_name 
  !mesh.name = v_name;
  !return mesh
EndProcedure

Procedure MergeMeshes(Array Meshes(1))
  Protected i, Mesh
  !var meshes = []
  
  For i = 0 To ArraySize(Meshes())
    Mesh = Meshes(i)
    !meshes.push(v_mesh) 
  Next
  
  !return BABYLON.Mesh.MergeMeshes(meshes, true)   
EndProcedure

Procedure AttachMesh(Parent, Child, x.f, y.f, z.f)
  !v_child.parent = v_parent,
  !v_child.position.x = v_x;
  !v_child.position.y = v_y;
  !v_child.position.z = v_z;
EndProcedure

Procedure SetMeshPivot(Mesh, x.f, y.f, z.f)
  !v_mesh.setPivotMatrix(BABYLON.Matrix.Translation(v_x, v_y, v_z));
EndProcedure

;-
;-Picking
Procedure PickEnable()  
  !BABYLON.Tools.Log("Picking is active")
  !v_bjscurrentscene.onPointerDown = function (evt, pickResult) {
  ! if (pickResult.hit) {
  !  bjs$v_pick._hit      = pickResult.hit
  !  bjs$v_pick._point._x = pickResult.pickedPoint.x;  
  !  bjs$v_pick._point._y = pickResult.pickedPoint.y;
  !  bjs$v_pick._point._z = pickResult.pickedPoint.z;  
  !  bjs$v_pick._distance = pickResult.distance;
  !  bjs$v_pick._mesh     = pickResult.pickedMesh;
  !  bjs$v_pick._uniqueid = pickResult.pickedMesh.uniqueId;  
  ! }
  !};  
EndProcedure

Procedure IsPick()
  If Pick\hit = #True
    Pick\hit = #False
    ProcedureReturn Pick\mesh
  Else
    ProcedureReturn #False
  EndIf  
EndProcedure

Procedure.f PickX()
  ProcedureReturn Pick\point\x
EndProcedure

Procedure.f PickY()
  ProcedureReturn Pick\point\y
EndProcedure

Procedure.f PickZ()
 ProcedureReturn Pick\point\Z
EndProcedure

Procedure.f PickDistance()
  ProcedureReturn Pick\distance
EndProcedure

Procedure PickMesh()
  ProcedureReturn Pick\mesh
EndProcedure

Procedure MeshId(Mesh)
  !return v_mesh.pickedMesh.uniqueId
EndProcedure

Procedure Translate(Mesh, Value.f)
  !v_mesh.translate(new BABYLON.Vector3(v_value, 0, 0), 0.1, BABYLON.Space.LOCAL);
EndProcedure
; IDE Options = SpiderBasic 2.20 (Windows - x86)
; CursorPosition = 162
; FirstLine = 154
; Folding = -------
; iOSAppOrientation = 0
; AndroidAppOrientation = 0
; EnableXP
; CompileSourceDirectory