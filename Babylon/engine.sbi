;Babylon.js for SpiderBasic : Engine 

Procedure SetEnginePath(EnginePath.s = "sbbjs")
  BJSEnginePath = EnginePath  
EndProcedure

Procedure InitEngine(Callback, CanvasGadget = #PB_Ignore)    
  !require([bjs$v_bjsenginepath + "/babylon.custom.js"], 
  ! function(t) {
  !   if (BABYLON.Engine.isSupported()) {
  
        If CanvasGadget = #PB_Ignore    
          !$('<canvas>').attr('id', 'renderCanvas')
          ! .css({ width : '100%', height : '100%' })
          ! .appendTo('body');
        Else
          !var selector = $(spider_GadgetID(v_canvasgadget))[0].gadget
          !selector.id = "renderCanvas"
          !selector.style.width = '100%'
          !selector.style.height = '100%'
        EndIf
  
  !     v_bjscanvas = document.getElementById('renderCanvas');
  !     v_bjsengine = new BABYLON.Engine(v_bjscanvas, true, { preserveDrawingBuffer: true, stencil: true });  
  !     window.addEventListener('resize', function(){v_bjsengine.resize(); });  
  !     v_callback()
  !   } else {return false} 
  ! }
  !);    
EndProcedure  

Procedure RenderLoop(Callback)
  !v_bjsengine.runRenderLoop(v_callback)
EndProcedure

Procedure RenderWorld()
  !v_bjscurrentscene.render();
EndProcedure

Procedure CreateSceneShoot(Camera, Width, Height, Precision.f=1)
  !var size = { width: v_width, height: v_height, precision: v_precision}
  !BABYLON.Tools.CreateScreenshot(v_bjsengine, v_camera, size);
EndProcedure

Procedure showAxis(size) 
  !var makeTextPlane = function(text, color, v_size) {
  !	  var dynamicTexture = new BABYLON.DynamicTexture("DynamicTexture", 50, v_scene, true);
  !	  dynamicTexture.hasAlpha = true;
  !	  dynamicTexture.drawText(text, 5, 40, "bold 36px Arial", color , "transparent", true);
  !	  var plane = new BABYLON.Mesh.CreatePlane("TextPlane", v_size, v_scene, true);
  !	  plane.material = new BABYLON.StandardMaterial("TextPlaneMaterial", v_scene);
  !	  plane.material.backFaceCulling = false;
  !	  plane.material.specularColor = new BABYLON.Color3(0, 0, 0);
  !	  plane.material.diffuseTexture = dynamicTexture;
  !	  return plane;
  !};
  
  !var axisX = BABYLON.Mesh.CreateLines("axisX", [ 
  !		new BABYLON.Vector3.Zero(), new BABYLON.Vector3(v_size, 0, 0), new BABYLON.Vector3(v_size * 0.95, 0.05 * v_size, 0), 
  !		new BABYLON.Vector3(v_size, 0, 0), new BABYLON.Vector3(v_size * 0.95, -0.05 * v_size, 0)
  !	], v_scene);
  !axisX.color = new BABYLON.Color3(1, 0, 0);
  !var xChar = makeTextPlane("X", "red", v_size / 10);
  !xChar.position = new BABYLON.Vector3(0.9 * v_size, -0.05 * v_size, 0);
  
  !var axisY = BABYLON.Mesh.CreateLines("axisY", [
  !  	new BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, v_size, 0), new BABYLON.Vector3( -0.05 * v_size, v_size * 0.95, 0), 
  !  	new BABYLON.Vector3(0, v_size, 0), new BABYLON.Vector3( 0.05 * v_size, v_size * 0.95, 0)
  !  ], v_scene);
  !axisY.color = new BABYLON.Color3(0, 1, 0);
  !var yChar = makeTextPlane("Y", "green", v_size / 10);
  !yChar.position = new BABYLON.Vector3(0, 0.9 * v_size, -0.05 * v_size);
  
  !var axisZ = BABYLON.Mesh.CreateLines("axisZ", [
  !  	new BABYLON.Vector3.Zero(), new BABYLON.Vector3(0, 0, v_size), new BABYLON.Vector3( 0 , -0.05 * v_size, v_size * 0.95),
  !  	new BABYLON.Vector3(0, 0, v_size), new BABYLON.Vector3( 0, 0.05 * v_size, v_size * 0.95)
  !  ], v_scene);
  !axisZ.color = new BABYLON.Color3(0, 0, 1);
  !var zChar = makeTextPlane("Z", "blue", v_size / 10);
  !zChar.position = new BABYLON.Vector3(0, 0.05 * v_size, 0.9 * v_size);
EndProcedure
; IDE Options = SpiderBasic 2.20 (Windows - x86)
; Folding = --
; iOSAppOrientation = 0
; AndroidAppOrientation = 0
; EnableXP
; CompileSourceDirectory